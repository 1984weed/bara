type CodeResult {
  result: CodeResultDetail!
  stdout: String!
}

type CodeResultDetail {
  expected: String!
  input: String
  result: String!
  status: String!
  time: Int!
}

type CodeSnippet {
  code: String!
  lang: CodeLanguage!
}

type Problem {
  slug: String!
  title: String!
  description: String!
  codeSnippets: [CodeSnippet!]!
  problemDetailInfo: ProblemDetailInfo 
}

type ProblemDetailInfo {
  functionName: String!
  outputType: String!
  argsNum: Int!
  args: [CodeArgType!]!
  testCases: [TestCaseType!]!
}

type TestCaseType {
  input: [String]
  output: String!
}

type CodeArgType {
  type: String!
  name: String!
}

type Query {
  problems(limit: Int = 25, offset: Int = 0): [Problem!]!
  problem(slug: String): Problem!
  me: User
  testNewProblem(input: NewProblem!): Problem!
}

enum CodeLanguage {
  JavaScript
}

input SubmitCode {
  typedCode: String!
  lang: String!
  slug: String!
}

input TestCase {
  input: [String]
  output: String!
}

input CodeArg {
  type: String!
  name: String!
}

input NewProblem {
  title: String!
  description: String!
  functionName: String!
  outputType: String!
  argsNum: Int!
  args: [CodeArg!]!
  testCases: [TestCase!]!
}

enum UserRole {
  admin,
  normal
}

type User {
  id: ID!
  realName: String!
  userName: String!
  email: String!
  image: String!
  role: UserRole
  bio: String!
}

type Mutation {
  submitCode(input: SubmitCode!): CodeResult!
  createProblem(input: NewProblem!): Problem!
  changeProblem(slug: String, input: NewProblem!): Problem!
  registerUser(email: String, userName: String, password: String): User! 
}