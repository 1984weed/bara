type CodeResult {
  result: CodeResultDetail!
  stdout: String!
}

type CodeResultDetail {
  expected: String!
  result: String!
  status: String!
  time: Int!
}

type CodeSnippet {
  code: String!
  lang: CodeLanguage!
}

type Question {
  slug: String!
  title: String!
  description: String!
  codeSnippets: [CodeSnippet!]!
}

type Query {
  Questions(limit: Int = 25, offset: Int = 0): [Question!]!
  Question(slug: String): Question!
}

enum CodeLanguage {
  JavaScript
}

enum TestCaseArgType {
  NUMBER
  STRING
}

input SubmitCode {
  typedCode: String!
  lang: String!
  slug: String!
}

input TestCase {
  input: [String!]!
  output: String!
}

input CodeArg {
  type: TestCaseArgType!
  name: String!
}

input NewQuestion {
  title: String!
  description: String!
  functionName: String!
  languageID: CodeLanguage!
  argsNum: Int!
  args: [CodeArg!]!
  testCases: [TestCase!]!
}

type Mutation {
  submitCode(input: SubmitCode!): CodeResult!
  createQuestion(input: NewQuestion!): Question!
}